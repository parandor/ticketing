// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/train_ticketing/v1/ticketing.proto

package train_ticketingv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/parandor/ticketing/internal/gen/proto/train_ticketing/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// TrainTicketingServiceName is the fully-qualified name of the TrainTicketingService service.
	TrainTicketingServiceName = "proto.train_ticketing.v1.TrainTicketingService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// TrainTicketingServicePurchaseTicketProcedure is the fully-qualified name of the
	// TrainTicketingService's PurchaseTicket RPC.
	TrainTicketingServicePurchaseTicketProcedure = "/proto.train_ticketing.v1.TrainTicketingService/PurchaseTicket"
	// TrainTicketingServiceViewReceiptProcedure is the fully-qualified name of the
	// TrainTicketingService's ViewReceipt RPC.
	TrainTicketingServiceViewReceiptProcedure = "/proto.train_ticketing.v1.TrainTicketingService/ViewReceipt"
	// TrainTicketingServiceViewAdminDetailsProcedure is the fully-qualified name of the
	// TrainTicketingService's ViewAdminDetails RPC.
	TrainTicketingServiceViewAdminDetailsProcedure = "/proto.train_ticketing.v1.TrainTicketingService/ViewAdminDetails"
	// TrainTicketingServiceRemoveUserProcedure is the fully-qualified name of the
	// TrainTicketingService's RemoveUser RPC.
	TrainTicketingServiceRemoveUserProcedure = "/proto.train_ticketing.v1.TrainTicketingService/RemoveUser"
	// TrainTicketingServiceModifySeatProcedure is the fully-qualified name of the
	// TrainTicketingService's ModifySeat RPC.
	TrainTicketingServiceModifySeatProcedure = "/proto.train_ticketing.v1.TrainTicketingService/ModifySeat"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	trainTicketingServiceServiceDescriptor                = v1.File_proto_train_ticketing_v1_ticketing_proto.Services().ByName("TrainTicketingService")
	trainTicketingServicePurchaseTicketMethodDescriptor   = trainTicketingServiceServiceDescriptor.Methods().ByName("PurchaseTicket")
	trainTicketingServiceViewReceiptMethodDescriptor      = trainTicketingServiceServiceDescriptor.Methods().ByName("ViewReceipt")
	trainTicketingServiceViewAdminDetailsMethodDescriptor = trainTicketingServiceServiceDescriptor.Methods().ByName("ViewAdminDetails")
	trainTicketingServiceRemoveUserMethodDescriptor       = trainTicketingServiceServiceDescriptor.Methods().ByName("RemoveUser")
	trainTicketingServiceModifySeatMethodDescriptor       = trainTicketingServiceServiceDescriptor.Methods().ByName("ModifySeat")
)

// TrainTicketingServiceClient is a client for the proto.train_ticketing.v1.TrainTicketingService
// service.
type TrainTicketingServiceClient interface {
	PurchaseTicket(context.Context, *connect.Request[v1.PurchaseTicketRequest]) (*connect.Response[v1.PurchaseTicketResponse], error)
	ViewReceipt(context.Context, *connect.Request[v1.ViewReceiptRequest]) (*connect.Response[v1.ViewReceiptResponse], error)
	ViewAdminDetails(context.Context, *connect.Request[v1.ViewAdminDetailsRequest]) (*connect.Response[v1.ViewAdminDetailsResponse], error)
	RemoveUser(context.Context, *connect.Request[v1.RemoveUserRequest]) (*connect.Response[v1.RemoveUserResponse], error)
	ModifySeat(context.Context, *connect.Request[v1.ModifySeatRequest]) (*connect.Response[v1.ModifySeatResponse], error)
}

// NewTrainTicketingServiceClient constructs a client for the
// proto.train_ticketing.v1.TrainTicketingService service. By default, it uses the Connect protocol
// with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed requests. To
// use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or connect.WithGRPCWeb()
// options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewTrainTicketingServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) TrainTicketingServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &trainTicketingServiceClient{
		purchaseTicket: connect.NewClient[v1.PurchaseTicketRequest, v1.PurchaseTicketResponse](
			httpClient,
			baseURL+TrainTicketingServicePurchaseTicketProcedure,
			connect.WithSchema(trainTicketingServicePurchaseTicketMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		viewReceipt: connect.NewClient[v1.ViewReceiptRequest, v1.ViewReceiptResponse](
			httpClient,
			baseURL+TrainTicketingServiceViewReceiptProcedure,
			connect.WithSchema(trainTicketingServiceViewReceiptMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		viewAdminDetails: connect.NewClient[v1.ViewAdminDetailsRequest, v1.ViewAdminDetailsResponse](
			httpClient,
			baseURL+TrainTicketingServiceViewAdminDetailsProcedure,
			connect.WithSchema(trainTicketingServiceViewAdminDetailsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		removeUser: connect.NewClient[v1.RemoveUserRequest, v1.RemoveUserResponse](
			httpClient,
			baseURL+TrainTicketingServiceRemoveUserProcedure,
			connect.WithSchema(trainTicketingServiceRemoveUserMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		modifySeat: connect.NewClient[v1.ModifySeatRequest, v1.ModifySeatResponse](
			httpClient,
			baseURL+TrainTicketingServiceModifySeatProcedure,
			connect.WithSchema(trainTicketingServiceModifySeatMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// trainTicketingServiceClient implements TrainTicketingServiceClient.
type trainTicketingServiceClient struct {
	purchaseTicket   *connect.Client[v1.PurchaseTicketRequest, v1.PurchaseTicketResponse]
	viewReceipt      *connect.Client[v1.ViewReceiptRequest, v1.ViewReceiptResponse]
	viewAdminDetails *connect.Client[v1.ViewAdminDetailsRequest, v1.ViewAdminDetailsResponse]
	removeUser       *connect.Client[v1.RemoveUserRequest, v1.RemoveUserResponse]
	modifySeat       *connect.Client[v1.ModifySeatRequest, v1.ModifySeatResponse]
}

// PurchaseTicket calls proto.train_ticketing.v1.TrainTicketingService.PurchaseTicket.
func (c *trainTicketingServiceClient) PurchaseTicket(ctx context.Context, req *connect.Request[v1.PurchaseTicketRequest]) (*connect.Response[v1.PurchaseTicketResponse], error) {
	return c.purchaseTicket.CallUnary(ctx, req)
}

// ViewReceipt calls proto.train_ticketing.v1.TrainTicketingService.ViewReceipt.
func (c *trainTicketingServiceClient) ViewReceipt(ctx context.Context, req *connect.Request[v1.ViewReceiptRequest]) (*connect.Response[v1.ViewReceiptResponse], error) {
	return c.viewReceipt.CallUnary(ctx, req)
}

// ViewAdminDetails calls proto.train_ticketing.v1.TrainTicketingService.ViewAdminDetails.
func (c *trainTicketingServiceClient) ViewAdminDetails(ctx context.Context, req *connect.Request[v1.ViewAdminDetailsRequest]) (*connect.Response[v1.ViewAdminDetailsResponse], error) {
	return c.viewAdminDetails.CallUnary(ctx, req)
}

// RemoveUser calls proto.train_ticketing.v1.TrainTicketingService.RemoveUser.
func (c *trainTicketingServiceClient) RemoveUser(ctx context.Context, req *connect.Request[v1.RemoveUserRequest]) (*connect.Response[v1.RemoveUserResponse], error) {
	return c.removeUser.CallUnary(ctx, req)
}

// ModifySeat calls proto.train_ticketing.v1.TrainTicketingService.ModifySeat.
func (c *trainTicketingServiceClient) ModifySeat(ctx context.Context, req *connect.Request[v1.ModifySeatRequest]) (*connect.Response[v1.ModifySeatResponse], error) {
	return c.modifySeat.CallUnary(ctx, req)
}

// TrainTicketingServiceHandler is an implementation of the
// proto.train_ticketing.v1.TrainTicketingService service.
type TrainTicketingServiceHandler interface {
	PurchaseTicket(context.Context, *connect.Request[v1.PurchaseTicketRequest]) (*connect.Response[v1.PurchaseTicketResponse], error)
	ViewReceipt(context.Context, *connect.Request[v1.ViewReceiptRequest]) (*connect.Response[v1.ViewReceiptResponse], error)
	ViewAdminDetails(context.Context, *connect.Request[v1.ViewAdminDetailsRequest]) (*connect.Response[v1.ViewAdminDetailsResponse], error)
	RemoveUser(context.Context, *connect.Request[v1.RemoveUserRequest]) (*connect.Response[v1.RemoveUserResponse], error)
	ModifySeat(context.Context, *connect.Request[v1.ModifySeatRequest]) (*connect.Response[v1.ModifySeatResponse], error)
}

// NewTrainTicketingServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewTrainTicketingServiceHandler(svc TrainTicketingServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	trainTicketingServicePurchaseTicketHandler := connect.NewUnaryHandler(
		TrainTicketingServicePurchaseTicketProcedure,
		svc.PurchaseTicket,
		connect.WithSchema(trainTicketingServicePurchaseTicketMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	trainTicketingServiceViewReceiptHandler := connect.NewUnaryHandler(
		TrainTicketingServiceViewReceiptProcedure,
		svc.ViewReceipt,
		connect.WithSchema(trainTicketingServiceViewReceiptMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	trainTicketingServiceViewAdminDetailsHandler := connect.NewUnaryHandler(
		TrainTicketingServiceViewAdminDetailsProcedure,
		svc.ViewAdminDetails,
		connect.WithSchema(trainTicketingServiceViewAdminDetailsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	trainTicketingServiceRemoveUserHandler := connect.NewUnaryHandler(
		TrainTicketingServiceRemoveUserProcedure,
		svc.RemoveUser,
		connect.WithSchema(trainTicketingServiceRemoveUserMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	trainTicketingServiceModifySeatHandler := connect.NewUnaryHandler(
		TrainTicketingServiceModifySeatProcedure,
		svc.ModifySeat,
		connect.WithSchema(trainTicketingServiceModifySeatMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/proto.train_ticketing.v1.TrainTicketingService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case TrainTicketingServicePurchaseTicketProcedure:
			trainTicketingServicePurchaseTicketHandler.ServeHTTP(w, r)
		case TrainTicketingServiceViewReceiptProcedure:
			trainTicketingServiceViewReceiptHandler.ServeHTTP(w, r)
		case TrainTicketingServiceViewAdminDetailsProcedure:
			trainTicketingServiceViewAdminDetailsHandler.ServeHTTP(w, r)
		case TrainTicketingServiceRemoveUserProcedure:
			trainTicketingServiceRemoveUserHandler.ServeHTTP(w, r)
		case TrainTicketingServiceModifySeatProcedure:
			trainTicketingServiceModifySeatHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedTrainTicketingServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedTrainTicketingServiceHandler struct{}

func (UnimplementedTrainTicketingServiceHandler) PurchaseTicket(context.Context, *connect.Request[v1.PurchaseTicketRequest]) (*connect.Response[v1.PurchaseTicketResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.train_ticketing.v1.TrainTicketingService.PurchaseTicket is not implemented"))
}

func (UnimplementedTrainTicketingServiceHandler) ViewReceipt(context.Context, *connect.Request[v1.ViewReceiptRequest]) (*connect.Response[v1.ViewReceiptResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.train_ticketing.v1.TrainTicketingService.ViewReceipt is not implemented"))
}

func (UnimplementedTrainTicketingServiceHandler) ViewAdminDetails(context.Context, *connect.Request[v1.ViewAdminDetailsRequest]) (*connect.Response[v1.ViewAdminDetailsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.train_ticketing.v1.TrainTicketingService.ViewAdminDetails is not implemented"))
}

func (UnimplementedTrainTicketingServiceHandler) RemoveUser(context.Context, *connect.Request[v1.RemoveUserRequest]) (*connect.Response[v1.RemoveUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.train_ticketing.v1.TrainTicketingService.RemoveUser is not implemented"))
}

func (UnimplementedTrainTicketingServiceHandler) ModifySeat(context.Context, *connect.Request[v1.ModifySeatRequest]) (*connect.Response[v1.ModifySeatResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.train_ticketing.v1.TrainTicketingService.ModifySeat is not implemented"))
}
