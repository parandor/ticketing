// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/library/v1/library.proto

package libraryv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/parandor/ticketing/internal/gen/proto/library/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// LibraryServiceName is the fully-qualified name of the LibraryService service.
	LibraryServiceName = "proto.library.v1.LibraryService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// LibraryServiceBorrowBookProcedure is the fully-qualified name of the LibraryService's BorrowBook
	// RPC.
	LibraryServiceBorrowBookProcedure = "/proto.library.v1.LibraryService/BorrowBook"
	// LibraryServiceReturnBookProcedure is the fully-qualified name of the LibraryService's ReturnBook
	// RPC.
	LibraryServiceReturnBookProcedure = "/proto.library.v1.LibraryService/ReturnBook"
	// LibraryServiceListBooksProcedure is the fully-qualified name of the LibraryService's ListBooks
	// RPC.
	LibraryServiceListBooksProcedure = "/proto.library.v1.LibraryService/ListBooks"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	libraryServiceServiceDescriptor          = v1.File_proto_library_v1_library_proto.Services().ByName("LibraryService")
	libraryServiceBorrowBookMethodDescriptor = libraryServiceServiceDescriptor.Methods().ByName("BorrowBook")
	libraryServiceReturnBookMethodDescriptor = libraryServiceServiceDescriptor.Methods().ByName("ReturnBook")
	libraryServiceListBooksMethodDescriptor  = libraryServiceServiceDescriptor.Methods().ByName("ListBooks")
)

// LibraryServiceClient is a client for the proto.library.v1.LibraryService service.
type LibraryServiceClient interface {
	// Borrow a book
	BorrowBook(context.Context, *connect.Request[v1.BorrowBookRequest]) (*connect.Response[v1.BorrowBookResponse], error)
	// Return a book
	ReturnBook(context.Context, *connect.Request[v1.ReturnBookRequest]) (*connect.Response[v1.ReturnBookResponse], error)
	// List all books
	ListBooks(context.Context, *connect.Request[v1.ListBooksRequest]) (*connect.Response[v1.ListBooksResponse], error)
}

// NewLibraryServiceClient constructs a client for the proto.library.v1.LibraryService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewLibraryServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) LibraryServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &libraryServiceClient{
		borrowBook: connect.NewClient[v1.BorrowBookRequest, v1.BorrowBookResponse](
			httpClient,
			baseURL+LibraryServiceBorrowBookProcedure,
			connect.WithSchema(libraryServiceBorrowBookMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		returnBook: connect.NewClient[v1.ReturnBookRequest, v1.ReturnBookResponse](
			httpClient,
			baseURL+LibraryServiceReturnBookProcedure,
			connect.WithSchema(libraryServiceReturnBookMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listBooks: connect.NewClient[v1.ListBooksRequest, v1.ListBooksResponse](
			httpClient,
			baseURL+LibraryServiceListBooksProcedure,
			connect.WithSchema(libraryServiceListBooksMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// libraryServiceClient implements LibraryServiceClient.
type libraryServiceClient struct {
	borrowBook *connect.Client[v1.BorrowBookRequest, v1.BorrowBookResponse]
	returnBook *connect.Client[v1.ReturnBookRequest, v1.ReturnBookResponse]
	listBooks  *connect.Client[v1.ListBooksRequest, v1.ListBooksResponse]
}

// BorrowBook calls proto.library.v1.LibraryService.BorrowBook.
func (c *libraryServiceClient) BorrowBook(ctx context.Context, req *connect.Request[v1.BorrowBookRequest]) (*connect.Response[v1.BorrowBookResponse], error) {
	return c.borrowBook.CallUnary(ctx, req)
}

// ReturnBook calls proto.library.v1.LibraryService.ReturnBook.
func (c *libraryServiceClient) ReturnBook(ctx context.Context, req *connect.Request[v1.ReturnBookRequest]) (*connect.Response[v1.ReturnBookResponse], error) {
	return c.returnBook.CallUnary(ctx, req)
}

// ListBooks calls proto.library.v1.LibraryService.ListBooks.
func (c *libraryServiceClient) ListBooks(ctx context.Context, req *connect.Request[v1.ListBooksRequest]) (*connect.Response[v1.ListBooksResponse], error) {
	return c.listBooks.CallUnary(ctx, req)
}

// LibraryServiceHandler is an implementation of the proto.library.v1.LibraryService service.
type LibraryServiceHandler interface {
	// Borrow a book
	BorrowBook(context.Context, *connect.Request[v1.BorrowBookRequest]) (*connect.Response[v1.BorrowBookResponse], error)
	// Return a book
	ReturnBook(context.Context, *connect.Request[v1.ReturnBookRequest]) (*connect.Response[v1.ReturnBookResponse], error)
	// List all books
	ListBooks(context.Context, *connect.Request[v1.ListBooksRequest]) (*connect.Response[v1.ListBooksResponse], error)
}

// NewLibraryServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewLibraryServiceHandler(svc LibraryServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	libraryServiceBorrowBookHandler := connect.NewUnaryHandler(
		LibraryServiceBorrowBookProcedure,
		svc.BorrowBook,
		connect.WithSchema(libraryServiceBorrowBookMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	libraryServiceReturnBookHandler := connect.NewUnaryHandler(
		LibraryServiceReturnBookProcedure,
		svc.ReturnBook,
		connect.WithSchema(libraryServiceReturnBookMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	libraryServiceListBooksHandler := connect.NewUnaryHandler(
		LibraryServiceListBooksProcedure,
		svc.ListBooks,
		connect.WithSchema(libraryServiceListBooksMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/proto.library.v1.LibraryService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case LibraryServiceBorrowBookProcedure:
			libraryServiceBorrowBookHandler.ServeHTTP(w, r)
		case LibraryServiceReturnBookProcedure:
			libraryServiceReturnBookHandler.ServeHTTP(w, r)
		case LibraryServiceListBooksProcedure:
			libraryServiceListBooksHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedLibraryServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedLibraryServiceHandler struct{}

func (UnimplementedLibraryServiceHandler) BorrowBook(context.Context, *connect.Request[v1.BorrowBookRequest]) (*connect.Response[v1.BorrowBookResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.library.v1.LibraryService.BorrowBook is not implemented"))
}

func (UnimplementedLibraryServiceHandler) ReturnBook(context.Context, *connect.Request[v1.ReturnBookRequest]) (*connect.Response[v1.ReturnBookResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.library.v1.LibraryService.ReturnBook is not implemented"))
}

func (UnimplementedLibraryServiceHandler) ListBooks(context.Context, *connect.Request[v1.ListBooksRequest]) (*connect.Response[v1.ListBooksResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.library.v1.LibraryService.ListBooks is not implemented"))
}
